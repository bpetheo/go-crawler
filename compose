#!/bin/sh

set -e

#
# compose
#

# set up colors

# check if stdout is a terminal
if [ -t 1 ]; then

    # see if it supports colors
    ncolors=$(tput colors)

    if [ -n "$ncolors" ] && [ "$ncolors" -ge 8 ]; then
        # shellcheck disable=SC2034
        BOLD="$(tput bold)"
        # shellcheck disable=SC2034
        UNDERLINE="$(tput smul)"
        # shellcheck disable=SC2034
        STANDOUT="$(tput smso)"
        # shellcheck disable=SC2034
        NORMAL="$(tput sgr0)"
        # shellcheck disable=SC2034
        BLACK="$(tput setaf 0)"
        # shellcheck disable=SC2034
        RED="$(tput setaf 1)"
        # shellcheck disable=SC2034
        GREEN="$(tput setaf 2)"
        # shellcheck disable=SC2034
        YELLOW="$(tput setaf 3)"
        # shellcheck disable=SC2034
        BLUE="$(tput setaf 4)"
        # shellcheck disable=SC2034
        MAGENTA="$(tput setaf 5)"
        # shellcheck disable=SC2034
        CYAN="$(tput setaf 6)"
        # shellcheck disable=SC2034
        WHITE="$(tput setaf 7)"
    fi

    unset ncolors
fi

# readlink -f emulation, needed for mac
# https://github.com/mkropat/sh-realpath

realpath() {
    canonicalize_path "$(resolve_symlinks "$1")"
}

resolve_symlinks() {
    _resolve_symlinks "$1"
}

_resolve_symlinks() {
    _assert_no_path_cycles "$@" || return

    local dir_context path
    path=$(readlink -- "$1")
    if [ $? -eq 0 ]; then
        dir_context=$(dirname -- "$1")
        _resolve_symlinks "$(_prepend_dir_context_if_necessary "$dir_context" "$path")" "$@"
    else
        printf '%s\n' "$1"
    fi
}

_prepend_dir_context_if_necessary() {
    if [ "$1" = . ]; then
        printf '%s\n' "$2"
    else
        _prepend_path_if_relative "$1" "$2"
    fi
}

_prepend_path_if_relative() {
    case "$2" in
        /* ) printf '%s\n' "$2" ;;
         * ) printf '%s\n' "$1/$2" ;;
    esac
}

_assert_no_path_cycles() {
    local target path

    target=$1
    shift

    for path in "$@"; do
        if [ "$path" = "$target" ]; then
            return 1
        fi
    done
}

canonicalize_path() {
    if [ -d "$1" ]; then
        _canonicalize_dir_path "$1"
    else
        _canonicalize_file_path "$1"
    fi
}

_canonicalize_dir_path() {
    (cd "$1" 2>/dev/null && pwd -P)
}

_canonicalize_file_path() {
    local dir file
    dir=$(dirname -- "$1")
    file=$(basename -- "$1")
    (cd "$dir" 2>/dev/null && printf '%s/%s\n' "$(pwd -P)" "$file")
}

BASEDIR=$(dirname "$0")
BASEDIR=$(canonicalize_path "$BASEDIR")

cd "$BASEDIR"

if [ $# -eq 0 ] || [ "$1" = "help" ] || [ "$1" = "--help" ]; then
    echo "${YELLOW}Available tasks:${NORMAL}"
    for i in "$BASEDIR"/docker/compose/*.sh; do
        name=$(basename "$i")
        description=$(grep '#task:' "$i" || echo "")
        printf "  %s\t\t%s\n" "${GREEN}${name%.sh}${NORMAL}" "${description#\#task:}"
    done
    exit 0
fi

PROJECT_NAME="$COMPOSE_PROJECT_NAME"
if [ -z "$PROJECT_NAME" ]; then
    PROJECT_NAME=$(basename "$BASEDIR")
fi

# this script doesn't support any parameters
if [ "${1##-}" != "$1" ] && [ "$1" != "--" ]; then
    echo "Unknown parameter \"$1\""
    exit 1
fi

TASK=$1
TASKSDIR="$BASEDIR/docker/compose"
TASKFILE="$TASKSDIR/$TASK.sh"

if [ ! -f "$TASKFILE" ]; then
    echo "Unknown task \"$TASK\""
    exit 1
fi
shift 1
# shellcheck disable=SC2034
TASKRUNNER="./compose"
. "$TASKFILE"
